{"version":3,"file":"static/js/676.ed071028.chunk.js","mappings":"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","sources":["common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx","common/utils/useForm.tsx","common/Button/styles.ts","common/Button/index.tsx"],"sourcesContent":["import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled.div`\r\n  padding: 50px 0;\r\n`;\r\n\r\nexport const FormGroup = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  color: red;\r\n  font-size: 14px;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport const Message = styled.p<{ success?: boolean; error?: boolean }>`\r\n  font-size: 16px;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  color: ${({ success, error }) => (success ? \"green\" : error ? \"red\" : \"black\")};\r\n  background-color: ${({ success, error }) => (success ? \"#d4edda\" : error ? \"#f8d7da\" : \"transparent\")};\r\n  border: ${({ success, error }) => (success ? \"1px solid #c3e6cb\" : error ? \"1px solid #f5c6cb\" : \"none\")};\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\"; // Uses our updated useForm.ts\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer, Message } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit, isSubmitting, successMessage, errorMessage } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return ErrorMessage ? <Span>{ErrorMessage}</Span> : null;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              {successMessage && <Message success>{successMessage}</Message>}\r\n              {errorMessage && <Message error>{errorMessage}</Message>}\r\n\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder={t(\"Your Name\")}\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder={t(\"Your Email\")}\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder={t(\"Your Message\")}\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">\r\n                  {isSubmitting ? t(\"Sending...\") : t(\"Submit\")}\r\n                </Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n","import { useState } from \"react\";\r\nimport validate from \"./validationRules\"; // Ensure this file exists for validation\r\nimport { IValues } from \"../types\"; // Import the correct type\r\n\r\nexport const useForm = (validate: (values: IValues) => Partial<IValues>) => {\r\n    const [values, setValues] = useState<IValues>({ name: \"\", email: \"\", message: \"\" });\r\n    const [errors, setErrors] = useState<Partial<IValues>>({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { name, value } = event.target;\r\n        setValues({ ...values, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        setIsSubmitting(true);\r\n        setSuccessMessage(null);\r\n        setErrorMessage(null);\r\n\r\n        // Validate form fields\r\n        const validationErrors = validate(values);\r\n        setErrors(validationErrors);\r\n\r\n        // Stop submission if validation fails\r\n        if (Object.keys(validationErrors).length > 0) {\r\n            setIsSubmitting(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch('/contact', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(values),\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (result.success) {\r\n                setSuccessMessage(\"✅ Email Sent Successfully!\");\r\n                setValues({ name: \"\", email: \"\", message: \"\" }); // Reset form fields\r\n            } else {\r\n                setErrorMessage(\"❌ Failed to send email. Try again later.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error submitting form:\", error);\r\n            setErrorMessage(\"❌ An error occurred. Please try again.\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return { values, errors, handleChange, handleSubmit, isSubmitting, successMessage, errorMessage };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<{ color?: string }>`\r\n  background: ${(p) => p.color || \"#2e186a\"};\r\n  color: ${(p) => (p.color ? \"#2E186A\" : \"#fff\")};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid #edf3f5;\r\n  border-radius: 4px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: #fff;\r\n    border: 1px solid rgb(255, 130, 92);\r\n    background-color: rgb(255, 130, 92);\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n"],"names":["validate","values","errors","name","email","test","message","Content","styled","Container","TextWrapper","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","div","FormGroup","form","Span","span","ButtonContainer","Message","p","success","error","_ref2","_ref3","handleChange","handleSubmit","isSubmitting","successMessage","errorMessage","setValues","useState","setErrors","setIsSubmitting","setSuccessMessage","setErrorMessage","event","value","target","async","preventDefault","validationErrors","Object","keys","length","response","fetch","method","headers","body","JSON","stringify","json","console","useForm","ValidationType","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","Input","TextArea","Button","StyledButton","color","onClick"],"sourceRoot":""}